#include <stdio.h>
int getline(char s[], int n) {
    int i, c = 0;
    for(i = 0; i < n && (c = getchar()) != EOF && c != '\n'; ++i) s[i] = c;
    s[i] = '\0';
    while(c != EOF && c != '\n') c = getchar();
    return(i);
}

---

int isint(char s[]) {
    int i = 0, kezd;
    while(s[i] == ' ' || s[i] == '\n' || s[i] == '\t') ++i;
    if(s[i] == '+' || s[i] == '-') ++i;
    kezd = i;
    while(s[i] >= '0' && s[i] <= '9' && i - kezd < 255) ++i;
    if(kezd == i || (s[i] != '\n' && s[i] != '\t' && s[i] != ' ' && s[i] != 0)) return 0;
    else return 1;
}

---

#include <ctype.h>
int isfloat(char s[]){
    int i=0, kezd;
    while(isspace(s[i])) ++i;
    if(s[i]=='+'||s[i]=='-') ++i;
    kezd=i;			
    while(isdigit(s[i])) ++i;
    if(s[i]=='.') ++i;
    while(isdigit(s[i])) ++i;
    if(i==kezd||(kezd+1==i&&s[kezd]=='.')) return 0;
    if(toupper(s[i])=='E'){
        ++i;
        if(s[i]=='+'||s[i]=='-')++i;
        if(!isdigit(s[i])) return 0;
        while(isdigit(s[i])) ++i;}
    if(isspace(s[i])||!s[i]) return 1;
    return 0;
} 

---


//Returns the n-th element of fibonacci sequence

int fibonacci(int n){
    if(n<2)return n;
    return fibo(n-1) + fibo(n-2);
}

---

//Returns the factorial of a number

int fakt(int x){
    if(x == 1) return 1;
    return x*fakt(x-1);
}

---

//Deletes the part of a string

void deleteFromStr(char *sourcestr, int from, int pcs){
    int i;
    for(i=from+pcs;*(sourcestr+i);i++)*(sourcestr+i-pcs)=*(sourcestr+i);
    *(sourcestr+i-pcs)='\0';
}

-------  INTEGER ------

#include <limits.h>
int getMax_int(int t[], int pcs){
	int i, max = INT_MIN;
	for(i=0;i<pcs;++i){
		if(t[i]>max) max=t[i];
	}
	return max;
}

---

#include <limits.h>
int getMin_int(int t[], int pcs){
	int i, min = INT_MAX;
	for(i=0;i<pcs;++i){
		if(t[i]<min) min=t[i];
	}
	return min;
}

---

int getSum_int(int t[], int pcs){
	int i, sum = 0;
	for(i=0;i<pcs;++i){
		sum += t[i];
	}
	return sum;
}

---

float getAvg_int(int t[], int pcs){
	int i, sum = 0;
	for(i=0;i<pcs;++i){
		sum += t[i];
	}
	return (float)sum / pcs;
}

------ FLOAT -------

#include <float.h>
float getMax_float(float t[], int pcs){
	int i;
	float max = FLT_MIN;
	for(i=0;i<pcs;++i){
		if(t[i]>max) max=t[i];
	}
	return max;
}

---

#include <float.h>
float getMin_float(float t[], int pcs){
	int i;
	float min = FLT_MAX;
	for(i=0;i<pcs;++i){
		if(t[i]<min) min=t[i];
	}
	return min;
}

---

float getSum_float(float t[], int pcs){
	int i;
	float sum = 0;
	for(i=0;i<pcs;++i){
		sum += t[i];
	}
	return sum;
}

---

float getAvg_float(float t[], int pcs){
	int i;
	float sum = 0;
	for(i=0;i<pcs;++i){
		sum += t[i];
	}
	return sum / pcs;
}

----- STRING ------

#include <string.h>
void reverse(char t[]) {
    int i, len;
    char temp;
    len = strlen(t) - 1;
    for(i = 0; i < (int)(len / 2); i++) {
        temp = t[i];
        t[i]= t[len - i];
        t[len - i] = temp;
    }
}

----- ORDERING -----

void orderASC(int t[], int pcs) {
    int i, j, temp;
    for(j = 0; j < pcs - 1; ++j) {
        for(i = 0; i < pcs - 1; ++i) {
            if(t[i] > t[i + 1]) {
                temp = t[i];
                t[i] = t[i + 1];
                t[i + 1] = temp;
            }
        }
    }
}

---

void orderDESC(int t[], int pcs) {
    int i, j, temp;
    for(j = 0; j < pcs - 1; ++j) {
        for(i = 0; i < pcs - 1; ++i) {
            if(t[i] < t[i + 1]) {
                temp = t[i];
                t[i] = t[i + 1];
                t[i + 1] = temp;
            }
        }
    }
}

---

void orderASC_float(float t[], int pcs) {
    int i, j;
	float temp;
    for(j = 0; j < pcs - 1; ++j) {
        for(i = 0; i < pcs - 1; ++i) {
            if(t[i] > t[i + 1]) {
                temp = t[i];
                t[i] = t[i + 1];
                t[i + 1] = temp;
            }
        }
    }
}

---

void orderDESC_float(float t[], int pcs) {
    int i, j;
	float temp;
    for(j = 0; j < pcs - 1; ++j) {
        for(i = 0; i < pcs - 1; ++i) {
            if(t[i] < t[i + 1]) {
                temp = t[i];
                t[i] = t[i + 1];
                t[i + 1] = temp;
            }
        }
    }
}

---

//Returns 1 if odd, 0 if odd
int iseven(int n){
    return n%2;
}

---

//Returns the count of evens in the array
int even_pcs(int t[], int pcs) {
    int i, osszeg = 0;
    for(i = 0; i < pcs; i++) {
        if(iseven(t[i]) == 0) osszeg++;
    }
    return osszeg;
}


---

#include <stdio.h>
#include <inttypes.h>
#include <limits.h>

/** Convert hex mac address to uint64_t
 *  @param[in] hwaddr hex mac address
 *  @return mac address as uint64_t
 */
uint64_t mac2int(const uint8_t hwaddr[])
{
    int8_t i;
    uint64_t ret = 0;
    const uint8_t *p = hwaddr;

    for (i = 5; i >= 0; i--) {
        ret |= (uint64_t) *p++ << (CHAR_BIT * i);
    }

    return ret;
}

---
#include <stdio.h>
#include <inttypes.h>
#include <limits.h>

/** Convert uint64_t mac address to hex
 * @param[in] mac uint64_t mac address
 * @param[out] hwaddr hex mac address
 */
void int2mac(const uint64_t mac, uint8_t *hwaddr)
{
    int8_t i;
    uint8_t *p = hwaddr;

    for (i = 5; i >= 0; i--) {
        *p++ = mac >> (CHAR_BIT * i);
    }
}
    return min;
}
